rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      // allow read, write: if request.auth.uid != null;
      match /users/{userId}{
      	allow read;
        allow create: if isValidUser(userId);
        
        match /friends/{friendId}{
        	allow read;
          
          // controlled by firebase-admin
          allow write: if false;
        }
        
        match /notifications/{notifId}{
        	allow read;
          // controlled by firebase-admin
          allow write: if false;
        }
      }
      
      match /notifications/{notifId}{
      	allow read: if canReadNotificationCollection();
        // controlled by firebase-admin
        allow write: if false;
      }
      
       match /calls/{callId}{
      	allow read: if canReadCallDocument();
        allow update: if canUpdateCallDocument();
        // create and delete is controlled by firebase admin
        
        match /receiver/{receiverId}{
        	allow read: if canReadWriteCallInfo(callId);
        	allow create: if canReadWriteCallInfo(callId);
        }
         match /sender/{senderId}{
        	allow read: if canReadWriteCallInfo(callId);
        	allow create: if canReadWriteCallInfo(callId);
        }
      }
      
      match /status/{statusId}{
      	allow read: if canReadStatusDocument(statusId);
        // controlled by firebase-admin
        allow write: if false;
      }
      

      match /accounts/{accountId}{
      	allow read: if canReadAccountDocument(accountId);
        allow create: if canCreateAccountDocument(accountId);

        match /sessions/{sessionId}{
        	allow read: if canReadSessionDocument(accountId);
          // controlled by firebase-admin
          allow write: if false;
        }
      }

      // functions
      function isValidUser(userId){
      	let isOwner = request.auth.uid == userId;
        let isUserRole = request.resource.data.role == 'user';
        return isOwner && isUserRole;
      }
      
      function canReadNotificationCollection(){
      	let currentUser = request.auth.uid;
      	let isUserAuthenticated = currentUser != null;
        let userSending = resource.data.from;
        let userReceiving = resource.data.to;
        let isUserIsOneOfTheSenderOrReceiver = (currentUser == userReceiving || currentUser == userSending);        
      	return isUserAuthenticated && isUserIsOneOfTheSenderOrReceiver;
      }
      
    
      
      function canReadCallDocument(){
      	let currentUser = request.auth.uid;
      	let isUserAuthenticated = currentUser != null;
        let userCalling = resource.data.from;
        let userReceiving = resource.data.userOnOtherSide;
        
       
        let isUserIsOneOfTheCallerOrReceiver = (currentUser == userReceiving || currentUser == userCalling);        
        return isUserAuthenticated && isUserIsOneOfTheCallerOrReceiver;
      }
      
      function canUpdateCallDocument(){
      	let currentUser = request.auth.uid;
      	let isUserAuthenticated = currentUser != null;
        let userCalling = request.resource.data.from;
        let userReceiving = request.resource.data.userOnOtherSide;
        let isCallingOrReceiving = (userCalling == currentUser || userReceiving == currentUser);
        let doesCallerExists = exists(/databases/$(database)/documents/users/$(userCalling));
        let doesReceiverExists = exists(/databases/$(database)/documents/users/$(userReceiving));
        return isUserAuthenticated && isCallingOrReceiving && doesCallerExists && doesReceiverExists;
      }
      
      function canReadWriteCallInfo(callId){
      	let currentUser = request.auth.uid;
      	let isUserAuthenticated = currentUser != null;
        let callDoc = get(/databases/$(database)/documents/calls/$(callId));
        let userCalling = callDoc.data.from;
        let userReceiving = callDoc.data.userOnOtherSide;
        let isUserIsOneOfTheCallerOrReceiver = (currentUser == userReceiving || currentUser == userCalling);        
        return isUserAuthenticated && isUserIsOneOfTheCallerOrReceiver;
      }
      
      function canReadStatusDocument(statusId){
      	let currentUser = request.auth.uid;
      	let isUserAuthenticated = currentUser != null;
        let isUserIdFriendOfCurrentUser = exists(/databases/$(database)/documents/users/$(currentUser)/friends/$(statusId));
        return isUserAuthenticated && isUserIdFriendOfCurrentUser;
      }

      function canCreateAccountDocument(accountId){
      	let currentUser = request.auth.uid;
      	let isUserAuthenticated = currentUser != null;
        let currentUserAccount = getAfter(/databases/$(database)/documents/accounts/$(accountId));
        let isCurrentUserAccount = currentUserAccount.data.uid == currentUser;
        // check if credits are strictly 2 in number
        let isCurrentUserAccountCreditsStrictly2 = currentUserAccount.data.credits == 2;
        return isUserAuthenticated && isCurrentUserAccount && isCurrentUserAccountCreditsStrictly2;
      }

      function canReadAccountDocument(accountId){
      	let currentUser = request.auth.uid;
      	let isUserAuthenticated = currentUser != null;
        let isCurrentUserAccount = accountId == currentUser;
        return isUserAuthenticated && isCurrentUserAccount;
      }

      function canReadSessionDocument(accountId){
      	let currentUser = request.auth.uid;
      	let isUserAuthenticated = currentUser != null;
        let isCurrentUserAccount = get(/databases/$(database)/documents/accounts/$(accountId)).data.uid == currentUser;
        return isUserAuthenticated && isCurrentUserAccount;
      }
    }
  }
}